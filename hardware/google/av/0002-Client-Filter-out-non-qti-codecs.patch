From 6409371bb1535c96e14530be35eae89ac1c62f6b Mon Sep 17 00:00:00 2001
From: Alfred Neumayer <dev.beidl@gmail.com>
Date: Wed, 14 Oct 2020 00:57:01 +0200
Subject: [PATCH] Client: Filter out non-qti codecs

Android uses a ranking system to prefer certain codecs over others,
whereas gsthybrissink doesn't make use of it.

Filter out any codecs that would be considered software decoders

Change-Id: I5f401bb50eef7f96a836de6390f84d9307de501f
---
 codec2/hidl/client/client.cpp | 36 ++++++++++++++++++++++++++++++++++-
 1 file changed, 35 insertions(+), 1 deletion(-)

diff --git a/codec2/hidl/client/client.cpp b/codec2/hidl/client/client.cpp
index ff67681..1ef1c42 100644
--- a/codec2/hidl/client/client.cpp
+++ b/codec2/hidl/client/client.cpp
@@ -541,6 +541,24 @@ c2_status_t Codec2Client::createInputSurface(
     return C2_OK;
 }
 
+static bool isSoftwareVideoDecoder(std::string& componentName) {
+    return ((componentName.find("c2.android.") == 0) ||
+            (componentName.find("OMX.google.") == 0) ||
+            (componentName.find("OMX.qcom.") == 0));
+}
+
+static bool isAudioDecoder(std::string& componentName) {
+    return ((componentName.find("c2.android.aac.decoder") == 0) ||
+            (componentName.find("c2.android.amrnb.decoder") == 0) ||
+            (componentName.find("c2.android.amrwb.decoder") == 0) ||
+            (componentName.find("c2.android.g711.alaw.decoder") == 0) ||
+            (componentName.find("c2.android.g711.mlaw.decoder") == 0) ||
+            (componentName.find("c2.android.mp3.decoder") == 0) ||
+            (componentName.find("c2.android.opus.decoder") == 0) ||
+            (componentName.find("c2.android.flac.decoder") == 0) ||
+            (componentName.find("c2.android.gsm.decoder") == 0));
+}
+
 const std::vector<C2Component::Traits>& Codec2Client::listComponents() const {
     std::lock_guard<std::mutex> lock(mMutex);
     if (mListed) {
@@ -548,16 +566,32 @@ const std::vector<C2Component::Traits>& Codec2Client::listComponents() const {
     }
     Return<void> transStatus = base()->listComponents(
             [this](const hidl_vec<IComponentStore::ComponentTraits>& t) {
+                int removeCounter = 0;
                 mTraitsList.resize(t.size());
                 mAliasesBuffer.resize(t.size());
                 for (size_t i = 0; i < t.size(); ++i) {
+                    std::string componentName = (std::string)(t[i].name);
+                    ALOGI("listComponents: %s", componentName.c_str());
+                    if ((componentName.find(".encoder") == std::string::npos)
+                          && isSoftwareVideoDecoder(componentName)
+                          && !isAudioDecoder(componentName)) {
+                        ++removeCounter;
+                        continue;
+                    }
+
+                    ALOGI("Accepting component '%s'", componentName.c_str());
+
                     c2_status_t status = objcpy(
-                            &mTraitsList[i], &mAliasesBuffer[i], t[i]);
+                            &mTraitsList[i - removeCounter],
+                            &mAliasesBuffer[i - removeCounter],
+                            t[i]);
                     if (status != C2_OK) {
                         ALOGE("listComponents -- corrupted output.");
                         return;
                     }
                 }
+                mTraitsList.resize(t.size() - removeCounter);
+                mAliasesBuffer.resize(t.size() - removeCounter);
             });
     if (!transStatus.isOk()) {
         ALOGE("listComponents -- failed transaction.");
-- 
2.25.1

