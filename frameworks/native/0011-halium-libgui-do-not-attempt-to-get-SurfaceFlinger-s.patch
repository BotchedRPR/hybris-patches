From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TheKit <thekit@disroot.org>
Date: Sun, 16 Jul 2023 21:39:02 +0000
Subject: [PATCH] (halium) libgui: do not attempt to get SurfaceFlinger service

Change-Id: I98090cf977d3c3c3e4fbbda3a244c0823e1bb5b3
---
 libs/gui/Surface.cpp               | 35 ++++++++++++++++++++++++++++++
 libs/gui/SurfaceComposerClient.cpp |  3 +++
 2 files changed, 38 insertions(+)

diff --git a/libs/gui/Surface.cpp b/libs/gui/Surface.cpp
index 353a91d06..37856b541 100644
--- a/libs/gui/Surface.cpp
+++ b/libs/gui/Surface.cpp
@@ -122,7 +122,11 @@ Surface::~Surface() {
 }
 
 sp<ISurfaceComposer> Surface::composerService() const {
+    // Halium: SurfaceFlinger is not running
+    /*
     return ComposerService::getComposerService();
+    */
+    return nullptr;
 }
 
 nsecs_t Surface::now() const {
@@ -175,6 +179,12 @@ status_t Surface::getDisplayRefreshCycleDuration(nsecs_t* outRefreshDuration) {
     ATRACE_CALL();
 
     DisplayStatInfo stats;
+
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return NO_ERROR;
+    }
+
     status_t result = composerService()->getDisplayStats(nullptr, &stats);
     if (result != NO_ERROR) {
         return result;
@@ -343,6 +353,11 @@ status_t Surface::getFrameTimestamps(uint64_t frameNumber,
 status_t Surface::getWideColorSupport(bool* supported) {
     ATRACE_CALL();
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return NAME_NOT_FOUND;
+    }
+
     const sp<IBinder> display = composerService()->getInternalDisplayToken();
     if (display == nullptr) {
         return NAME_NOT_FOUND;
@@ -356,6 +371,11 @@ status_t Surface::getWideColorSupport(bool* supported) {
 status_t Surface::getHdrSupport(bool* supported) {
     ATRACE_CALL();
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return NAME_NOT_FOUND;
+    }
+
     const sp<IBinder> display = composerService()->getInternalDisplayToken();
     if (display == nullptr) {
         return NAME_NOT_FOUND;
@@ -1237,6 +1257,11 @@ void Surface::querySupportedTimestampsLocked() const {
     }
     mQueriedSupportedTimestamps = true;
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return;
+    }
+
     std::vector<FrameEvent> supportedFrameTimestamps;
     status_t err = composerService()->getSupportedFrameTimestamps(
             &supportedFrameTimestamps);
@@ -2614,11 +2639,21 @@ status_t Surface::setFrameRate(float frameRate, int8_t compatibility,
         return BAD_VALUE;
     }
 
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return NAME_NOT_FOUND;
+    }
+
     return composerService()->setFrameRate(mGraphicBufferProducer, frameRate, compatibility,
                                            changeFrameRateStrategy);
 }
 
 status_t Surface::setFrameTimelineInfo(const FrameTimelineInfo& frameTimelineInfo) {
+    // Halium: SurfaceFlinger is not running
+    if (composerService() == nullptr) {
+        return NAME_NOT_FOUND;
+    }
+
     return composerService()->setFrameTimelineInfo(mGraphicBufferProducer, frameTimelineInfo);
 }
 
diff --git a/libs/gui/SurfaceComposerClient.cpp b/libs/gui/SurfaceComposerClient.cpp
index 4bcc9d56c..c1297076a 100644
--- a/libs/gui/SurfaceComposerClient.cpp
+++ b/libs/gui/SurfaceComposerClient.cpp
@@ -69,7 +69,10 @@ ComposerService::ComposerService()
 
 bool ComposerService::connectLocked() {
     const String16 name("SurfaceFlinger");
+    // Halium: SurfaceFlinger is not running
+    /*
     mComposerService = waitForService<ISurfaceComposer>(name);
+    */
     if (mComposerService == nullptr) {
         return false; // fatal error or permission problem
     }
