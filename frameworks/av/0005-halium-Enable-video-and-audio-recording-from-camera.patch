From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Vo=C3=9F?= <thomas.voss.bochum@gmail.com>
Date: Thu, 11 Feb 2016 15:43:33 +0100
Subject: [PATCH] (halium) Enable video and audio recording from camera.

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>

Change-Id: I9f0c80bf75c0ee713d27fe4460e409cef51cd4c2
---
 media/libaudioclient/AudioRecord.cpp          | 27 +++++++++++++------
 .../libaudioclient/camera_record_service.cpp  | 21 ++++++++++-----
 .../include/media/camera_record_service.h     | 12 ++++++---
 3 files changed, 42 insertions(+), 18 deletions(-)

diff --git a/media/libaudioclient/AudioRecord.cpp b/media/libaudioclient/AudioRecord.cpp
index fb4197517..847ec665d 100644
--- a/media/libaudioclient/AudioRecord.cpp
+++ b/media/libaudioclient/AudioRecord.cpp
@@ -392,7 +392,7 @@ status_t AudioRecord::set(
     mMarkerReached = false;
     mNewPosition = 0;
     mUpdatePeriod = 0;
-    AudioSystem::acquireAudioSessionId(mSessionId, adjPid, adjUid);
+    // AudioSystem::acquireAudioSessionId(mSessionId, mClientPid, mClientUid);
     mSequence = 1;
     mObservedSequence = mSequence;
     mInOverrun = false;
@@ -404,6 +404,8 @@ exit:
     if (status != NO_ERROR) {
         mMediaMetrics.markError(status, __FUNCTION__);
     }
+
+    ALOGD("return status %d", status);
     return status;
 }
 
@@ -458,6 +460,7 @@ status_t AudioRecord::start(AudioSystem::sync_event_t event, audio_session_t tri
     mActive = true;
 
     if (!(flags & CBLK_INVALID)) {
+        ALOGV("mAudioRecord->start()");
         status = statusTFromBinderStatus(mAudioRecord->start(event, triggerSession));
         if (status == DEAD_OBJECT) {
             flags |= CBLK_INVALID;
@@ -829,17 +832,25 @@ status_t AudioRecord::createRecord_l(const Modulo<uint32_t> &epoch)
         return status;
     }
 
-    output.audioRecord = recordService->openRecord(input.config.sample_rate, input.config.format,
-                                                   input.config.channel_mask,
-                                                   input.frameCount,
-                                                   input.clientInfo.clientTid,
-                                                   (int*)&mSessionId,
-                                                   &status);
+    ICameraRecordService::Recording recording = recordService->openRecord(input.config.sample_rate,
+                                                                          input.config.format,
+                                                                          input.config.channel_mask,
+                                                                          input.frameCount,
+                                                                          input.clientInfo.clientTid,
+                                                                          (int*)&mSessionId,
+                                                                          &status);
 
-    if (output.audioRecord == 0 || status != NO_ERROR) {
+    if (recording.ar == 0 || status != NO_ERROR) {
         ALOGE("CameraRecordService could not create record track, status: %d", status);
         goto exit;
     }
+    output.audioRecord = recording.ar;
+    output.cblk = recording.cblk;
+    output.buffers = recording.buffers;
+    // static audio_io_handle_t == 1
+    output.inputId = 1;
+    output.frameCount = mReqFrameCount;
+    output.notificationFrameCount = mNotificationFramesReq;
 
     ALOG_ASSERT(output.audioRecord != 0);
 
diff --git a/media/libaudioclient/camera_record_service.cpp b/media/libaudioclient/camera_record_service.cpp
index c47070023..326ba921f 100644
--- a/media/libaudioclient/camera_record_service.cpp
+++ b/media/libaudioclient/camera_record_service.cpp
@@ -59,7 +59,7 @@ status_t BpCameraRecordService::initRecord(
     return remote()->transact(OPEN_RECORD, data, &reply);
 }
 
-sp<media::IAudioRecord> BpCameraRecordService::openRecord(uint32_t sampleRate,
+ICameraRecordService::Recording BpCameraRecordService::openRecord(uint32_t sampleRate,
                             audio_format_t format,
                             audio_channel_mask_t channelMask,
                             size_t frameCount,
@@ -71,6 +71,8 @@ sp<media::IAudioRecord> BpCameraRecordService::openRecord(uint32_t sampleRate,
 
     Parcel data, reply;
     sp<media::IAudioRecord> record;
+    sp<IMemory> memory;
+    sp<IMemory> buffers;
     data.writeInterfaceToken(ICameraRecordService::getInterfaceDescriptor());
     data.writeInt32(sampleRate);
     data.writeInt32(format);
@@ -88,6 +90,8 @@ sp<media::IAudioRecord> BpCameraRecordService::openRecord(uint32_t sampleRate,
     else {
         lStatus = reply.readInt32();
         record = interface_cast<media::IAudioRecord>(reply.readStrongBinder());
+        memory = interface_cast<IMemory>(reply.readStrongBinder());
+        buffers = interface_cast<IMemory>(reply.readStrongBinder());
         if (lStatus == NO_ERROR) {
             if (record == 0) {
                 ALOGE("openRecord should have returned an IAudioRecord instance");
@@ -103,7 +107,7 @@ sp<media::IAudioRecord> BpCameraRecordService::openRecord(uint32_t sampleRate,
     if (status)
         *status = lStatus;
 
-    return record;
+    return Recording{record, memory, buffers};
 }
 
 // ----------------------------------------------------------------------------
@@ -143,13 +147,16 @@ status_t BnCameraRecordService::onTransact(uint32_t code, const Parcel& data,
             pid_t tid = (pid_t) data.readInt32();
             int sessionId = data.readInt32();
             status_t status;
-            sp<media::IAudioRecord> record = openRecord(sampleRate, format, channelMask,
+            Recording recording = openRecord(sampleRate, format, channelMask,
                 frameCount, tid, &sessionId, &status);
-            LOG_ALWAYS_FATAL_IF((record != 0) != (status == NO_ERROR));
+            LOG_ALWAYS_FATAL_IF((recording.ar != 0) != (status == NO_ERROR));
 
             reply->writeInt32(sessionId);
             reply->writeInt32(status);
-            reply->writeStrongBinder(record->asBinder(record));
+            reply->writeStrongBinder(recording.ar->asBinder(recording.ar));
+            reply->writeStrongBinder(recording.cblk->asBinder(recording.cblk));
+            if (recording.buffers != NULL)
+                reply->writeStrongBinder(recording.buffers->asBinder(recording.buffers));
             return NO_ERROR;
         } break;
         default:
@@ -211,7 +218,7 @@ status_t CameraRecordService::initRecord(
     return NO_ERROR;
 }
 
-sp<media::IAudioRecord> CameraRecordService::openRecord(uint32_t sampleRate,
+ICameraRecordService::Recording CameraRecordService::openRecord(uint32_t sampleRate,
                             audio_format_t format,
                             audio_channel_mask_t channelMask,
                             size_t frameCount,
@@ -272,7 +279,7 @@ Exit:
     if (status) {
         *status = lStatus;
     }
-    return recordHandle;
+    return Recording{recordHandle, recordTrack->getCblk(), NULL};
 }
 
 sp<CameraRecordService>& CameraRecordService::service_instance()
diff --git a/media/libaudioclient/include/media/camera_record_service.h b/media/libaudioclient/include/media/camera_record_service.h
index 8a4e7f585..eb544d1d6 100644
--- a/media/libaudioclient/include/media/camera_record_service.h
+++ b/media/libaudioclient/include/media/camera_record_service.h
@@ -21,6 +21,7 @@
 
 #include "android/media/IAudioRecord.h"
 #include <binder/IInterface.h>
+#include <binder/IMemory.h>
 #include <binder/Parcel.h>
 
 #include <system/audio.h>
@@ -34,6 +35,11 @@ class RecordThread;
 class ICameraRecordService : public IInterface
 {
 public:
+    struct Recording {
+        sp<media::IAudioRecord> ar;
+        sp<IMemory> cblk;
+        sp<IMemory> buffers;
+    };
     DECLARE_META_INTERFACE(CameraRecordService);
 
     static const char* exported_service_name() { return "android.media.ICameraRecordService"; }
@@ -42,7 +48,7 @@ public:
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask) = 0;
-    virtual sp<media::IAudioRecord> openRecord(
+    virtual Recording openRecord(
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask,
@@ -78,7 +84,7 @@ public:
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask);
-    virtual sp<media::IAudioRecord> openRecord(
+    virtual Recording openRecord(
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask,
@@ -104,7 +110,7 @@ public:
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask);
-    virtual sp<media::IAudioRecord> openRecord(
+    virtual Recording openRecord(
                                 uint32_t sampleRate,
                                 audio_format_t format,
                                 audio_channel_mask_t channelMask,
